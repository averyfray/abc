import java.util.*;

public class BestFirstMain {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int[][] board = new int[3][3];
        int[][] goal = new int[3][3];

        System.out.println("Enter the 8-puzzle initial board (use 0 for the empty space):");
        for (int i = 0; i < 3; i++)
            for (int j = 0; j < 3; j++)
                board[i][j] = scanner.nextInt();

        System.out.println("Enter the 8-puzzle goal state (use 0 for the empty space):");
        for (int i = 0; i < 3; i++)
            for (int j = 0; j < 3; j++)
                goal[i][j] = scanner.nextInt();

        State.setGoalState(goal);
        System.out.println("Running Best-First Search...");
        String solution = BestFirst.solve(board);

        if (solution == null)
            System.out.println("No solution found!");
        else
            System.out.println("Solution found: " + solution);

        scanner.close();
    }
}

class BestFirst {
    public static String solve(int[][] start) {
        PriorityQueue<State> pq = new PriorityQueue<>();
        Set<String> visited = new HashSet<>();
        State initialState = new State(start, ""); // g is not used

        pq.add(initialState);
        visited.add(Arrays.deepToString(start));

        while (!pq.isEmpty()) {
            State current = pq.poll();

            if (current.isGoal())
                return current.moves;

            for (State neighbor : current.generateNeighbors(false)) {
                String stateStr = Arrays.deepToString(neighbor.board);
                if (!visited.contains(stateStr)) {
                    pq.add(neighbor);
                    visited.add(stateStr);
                }
            }
        }
        return null;
    }
}

class State implements Comparable<State> {
    int[][] board;
    int h, zeroRow, zeroCol;
    String moves;
    static int[][] goal;

    public static void setGoalState(int[][] userGoal) {
        goal = new int[3][3];
        for (int i = 0; i < 3; i++)
            System.arraycopy(userGoal[i], 0, goal[i], 0, 3);
    }

    State(int[][] board, String moves) {
        this.board = copyBoard(board);
        this.h = calculateHeuristic(board);
        this.moves = moves;
        findZero();
    }

    void findZero() {
        for (int i = 0; i < 3; i++)
            for (int j = 0; j < 3; j++)
                if (board[i][j] == 0) {
                    zeroRow = i;
                    zeroCol = j;
                    return;
                }
    }

    int calculateHeuristic(int[][] board) {
        int misplaced = 0;
        for (int i = 0; i < 3; i++)
            for (int j = 0; j < 3; j++)
                if (board[i][j] != 0 && board[i][j] != goal[i][j])
                    misplaced++;
        return misplaced;
    }

    @Override
    public int compareTo(State other) {
        return Integer.compare(this.h, other.h);
    }

    boolean isGoal() {
        return Arrays.deepEquals(this.board, goal);
    }

    List<State> generateNeighbors(boolean isAStar) {
        List<State> neighbors = new ArrayList<>();
        int[][] directions = { {-1, 0}, {1, 0}, {0, -1}, {0, 1} };
        char[] moveLabels = { 'U', 'D', 'L', 'R' };

        for (int d = 0; d < 4; d++) {
            int newRow = zeroRow + directions[d][0];
            int newCol = zeroCol + directions[d][1];

            if (newRow >= 0 && newRow < 3 && newCol >= 0 && newCol < 3) {
                int[][] newBoard = copyBoard(this.board);
                newBoard[zeroRow][zeroCol] = newBoard[newRow][newCol];
                newBoard[newRow][newCol] = 0;

                neighbors.add(new State(newBoard, moves + moveLabels[d]));
            }
        }
        return neighbors;
    }

    int[][] copyBoard(int[][] original) {
        int[][] copy = new int[3][3];
        for (int i = 0; i < 3; i++)
            System.arraycopy(original[i], 0, copy[i], 0, 3);
        return copy;
    }
}
