import java.util.Scanner;

public class NQueens {
    static final int MAX = 20;
    static int[] X = new int[MAX + 1]; // 1-based indexing for convenience
    static int count = 0;

    // Check if queen can be placed at (k, i)
    static boolean place(int k, int i) {
        for (int j = 1; j < k; j++) {
            if (X[j] == i || Math.abs(X[j] - i) == Math.abs(j - k))
                return false; // Not safe
        }
        return true; // Safe
    }

    // Print the current board configuration
    static void printBoard(int n) {
        System.out.println("Solution " + count + ":");
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= n; j++) {
                if (X[i] == j)
                    System.out.print(" Q ");
                else
                    System.out.print(" . ");
            }
            System.out.println();
        }
        System.out.println();
    }

    // Recursive function to solve N-Queens
    static void nQueens(int k, int n) {
        for (int i = 1; i <= n; i++) {
            if (place(k, i)) {
                X[k] = i;
                if (k == n) {
                    count++;
                    printBoard(n);
                } else {
                    nQueens(k + 1, n);
                }
            }
        }
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        System.out.print("Enter the number of queens (n): ");
        int n = sc.nextInt();

        if (n < 1 || n > MAX) {
            System.out.println("Invalid input. Please enter n between 1 and " + MAX);
            sc.close();
            return;
        }

        System.out.println("\nAll possible solutions for " + n + "-Queens:\n");
        nQueens(1, n);

        if (count == 0)
            System.out.println("No solution exists.");
        else
            System.out.println("Total solutions: " + count);

        sc.close();
    }
}
